import React, { useState, ChangeEvent } from 'react';
import Layout from '@theme/Layout';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import Translate, {translate} from '@docusaurus/Translate';
import ReactSelect, { ActionMeta, Props as ReactSelectProps } from 'react-select';

import assets from './assets.json';
import severities from './severities.json';
import vulnerabilities from './vulnerabilities.json';
import versions from '../../../versions.json';

import styles from './report.module.css';

interface CustomFields {
  securityEmail: {
      email: string;
      keyLink: string;
      keyId: string;
  };
  title: string;
  tagline: string;
}

interface SelectOption {
  label: string;
  value: string;
  type?: string;
}

interface SelectProps<T> extends ReactSelectProps<T> {
  onChange: (value: T | T[]) => void;
  isMulti?: boolean;
}

export const Select = <T extends { label: string; value: string }>({
  onChange,
  isMulti,
  ...props
}: SelectProps<T>) => {
  const patchedOnChange = (
    value: T,
    actionMeta: ActionMeta<T>
  ) => {
    onChange(value);
  };

  return (
    <ReactSelect<T>
      onChange={patchedOnChange}
      isMulti={isMulti as any}
      {...props}
    />
  );
};

const ReportBug: React.FC = () => {
  const context = useDocusaurusContext();
  const customFields = context.siteConfig.customFields as unknown as CustomFields;
  const { email, keyLink, keyId } = customFields.securityEmail;
  const { title, tagline } = customFields;
  const [assetValue, setAsset] = useState<SelectOption | null>(null);
  const [weaknessValue, setWeakness] = useState<SelectOption[] | null>(null);
  const [severityValue, setSeverity] = useState<SelectOption | null>(null);
  const [version, setVersion] = useState<SelectOption | null>(null);
  const versionOptions = versions.map(v => ({ label: v, value: v }));
  const [emailFrom, setEmailFrom] = useState('');
  const [coreid, setCoreid] = useState('');

  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setEmailFrom(event.target.value);
  };
  const handleCoreidChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCoreid(event.target.value);
  };
  const formattedVulnerabilities = vulnerabilities.map(vul => ({
    ...vul,
    value: `${vul.type.toUpperCase()}-${vul.value}`
  }));

  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!emailFrom) {
      alert(translate({
        message: 'Please enter your email address.',
        id: 'vulnerability.alert.email',
      }));
      return;
    }
    if (!coreid) {
      alert(translate({
        message: 'Please enter your CoreID.',
        id: 'vulnerability.alert.coreid',
      }));
      return;
    }
    if (!assetValue) {
      alert(translate({
        message: 'Please select an Attack Surface.',
        id: 'vulnerability.alert.asset',
      }));
      return;
    }
    if (!weaknessValue) {
      alert(translate({
        message: 'Please define at least one Weakness.',
        id: 'vulnerability.alert.weakness',
      }));
      return;
    }
    if (!severityValue) {
      alert(translate({
        message: 'Please select a Severity level.',
        id: 'vulnerability.alert.severity',
      }));
      return;
    }
    if (!version) {
      alert(translate({
        message: 'Please select a Version.',
        id: 'vulnerability.alert.version',
      }));
      return;
    }

    const weaknesses = weaknessValue.map(w => `* [${w.type.toUpperCase()}-${w.value}](https://${w.type}.mitre.org/data/definitions/${w.value}.html)`).join('\n');
    const message = `### Asset\n\n${assetValue?.value}\n\n### Version\n\n${version?.value}\n\n### Weakness\n\n${weaknesses}\n\n### Severity\n\n${severityValue?.value}\n\n### Report\n\n`;
    const link = `mailto:${email}?from=${encodeURIComponent(emailFrom)}+${encodeURIComponent(coreid)}&subject=${encodeURIComponent('Vulnerability Report [' + severityValue.value + ']')}&body=${encodeURIComponent(message)}&key=${encodeURIComponent(keyLink)}`;
    window.location.href = link;
  };

  const resetForm = () => {
    setAsset(null);
    setWeakness(null);
    setSeverity(null);
    setVersion(null);
    setEmailFrom('');
    setCoreid('');
  };

  return (
    <Layout
      title={`${translate({
        message: 'Vulnerability Report',
        id: 'vulnerability.seo.title',
      })} - ${title}`}
      description={`${translate({
        message: 'Vulnerability Report',
        id: 'vulnerability.seo.description',
      })} - ${tagline}`}
    >
      <div className={styles.reportContainer}>
        <article>
          <div className="container">
            <p className="hero__subtitle"><Translate id="vulnerability.hero.heading">Vulnerability Report</Translate></p>
            <p>
              <Translate
                id="vulnerability.hero.info.note.part1"
                description="The text before the link in the vulnerability hero info note"
              >This form will open your email client and pre-fill the data for you. We recommend using </Translate>
              <a href="https://onion.email" target="_blank" rel="noopener noreferrer">
                {translate({
                  id: 'vulnerability.hero.info.note.link',
                  description: 'The link text in the vulnerability hero info note',
                  message: 'Onion.Email',
                })}
              </a>
              <Translate
                id="vulnerability.hero.info.note.part2"
                description="The text after the link in the vulnerability hero info note"
              > for secure email communication.</Translate>
            </p>
            <p>
              <span><Translate id="vulnerability.hero.info.reporttitle">To send your report:</Translate></span>
              <ol>
                <li><Translate id="vulnerability.hero.info.point1">Fill out the form.</Translate></li>
                <li><Translate id="vulnerability.hero.info.point2">Submit the form to open your email client.</Translate></li>
                <li><Translate id="vulnerability.hero.info.point3">Include your Core ID in one of the following ways:</Translate></li>
                <ul>
                  <li><Translate id="vulnerability.hero.info.point3a">Use your Core ID email address (e.g., cb00â€¦@yourprovider.com).</Translate></li>
                  <li><Translate id="vulnerability.hero.info.point3b">Append your Core ID to your email address (e.g., yourname+cb00â€¦@yourprovider.com).</Translate></li>
                  <li><Translate id="vulnerability.hero.info.point3c">Set your Core ID as your name in your email client settings.</Translate></li>
                  <li><Translate id="vulnerability.hero.info.point3d">Add your Core ID to the email header (e.g., X-Coreid: cb00â€¦).</Translate></li>
                </ul>
                <li>
                  <Translate
                    id="vulnerability.hero.info.info.point4.part1"
                    description="The text before the link in the vulnerability note 4"
                  >Encrypt your message with the following key: </Translate>
                  <a id="key" className="white" href={keyLink} download={'Core Blockchain Security (' + keyId + ').asc'} target="_blank" rel="noopener noreferrer">
                    ðŸ”‘ {keyId}
                  </a>
                </li>
                <li><Translate id="vulnerability.hero.info.point5">Send the email.</Translate></li>
              </ol>
            </p>
            <p>
            <Translate id="vulnerability.hero.info.footnote">For encrypted communication, please include your encryption key. Responses will be prioritized based on the severity and impact of the reported vulnerability.</Translate>
            </p>
          </div>
        </article>
        <main className="container">
          <div className="vulnerabilityPost">
            <form className="bug-report" onSubmit={handleSubmit} onReset={resetForm}>
            <fieldset>
                <legend><Translate id="vulnerability.form.email.legend">Your E-mail</Translate></legend>
                <label className="emailFrom" htmlFor="emailFrom"><Translate id="vulnerability.form.email.label">Your email address</Translate></label>
                <input
                  type="email"
                  name="emailFrom"
                  id="emailFrom"
                  className="form-control full-width"
                  placeholder={translate({
                    id: 'vulnerability.form.email.placeholder',
                    message: 'Your email address',
                  })}
                  value={emailFrom}
                  onChange={handleEmailChange}
                  required
                  autoFocus />
              </fieldset>
              <fieldset>
                <legend><Translate id="vulnerability.form.coreid.legend">Core ID</Translate></legend>
                <label className="coreid" htmlFor="coreid"><Translate id="vulnerability.form.coreid.label">Your Core ID</Translate></label>
                <input
                  type="text"
                  name="coreid"
                  id="coreid"
                  className="form-control full-width"
                  placeholder={translate({
                    id: 'vulnerability.form.coreid.placeholder',
                    message: 'Your Core ID',
                  })}
                  value={coreid}
                  onChange={handleCoreidChange}
                  pattern="^(cb|CB|Cb|cB)[0-9]{2}[0-9a-fA-F]{40}$"
                  required />
              </fieldset>
              <fieldset>
                <legend><Translate id="vulnerability.form.asset.legend">Asset</Translate></legend>
                <label className="asset" htmlFor="asset"><Translate id="vulnerability.form.asset.label">Attack surface</Translate></label>
                <Select
                  id="asset"
                  name="asset"
                  value={assetValue}
                  onChange={(selectedOption) => setAsset(selectedOption as SelectOption)}
                  className="rselect"
                  classNamePrefix="rselect"
                  options={assets}
                  defaultValue={assets[0]}
                  getOptionLabel={ option => `${option.label}` }
                  placeholder={translate({
                    id: 'vulnerability.form.asset.placeholder',
                    message: 'Select asset',
                  })}
                />
              </fieldset>
              <fieldset>
                <legend><Translate id="vulnerability.form.version.legend">Version</Translate></legend>
                <label className="version" htmlFor="version"><Translate id="vulnerability.form.version.label">Client version</Translate></label>
                <Select
                  id="version"
                  name="version"
                  value={version}
                  onChange={(selectedOption) => setVersion(selectedOption as SelectOption)}
                  className="rselect"
                  classNamePrefix="rselect"
                  options={versionOptions}
                  placeholder={translate({
                    id: 'vulnerability.form.version.placeholder',
                    message: 'Select version',
                  })}
                />
              </fieldset>
              <fieldset>
                <legend><Translate id="vulnerability.form.weakness.legend">Weakness</Translate></legend>
                <div>
                  <Select
                    id="weakness"
                    name="weakness"
                    value={weaknessValue}
                    onChange={(selectedOption) => {
                      setWeakness(Array.isArray(selectedOption) ? selectedOption : [selectedOption]);
                    }}
                    className="rselect"
                    classNamePrefix="rselect"
                    options={formattedVulnerabilities}
                    placeholder={translate({
                      id: 'vulnerability.form.weakness.placeholder',
                      message: 'Select weakness',
                    })}
                    openMenuOnFocus
                    hideSelectedOptions
                    getOptionLabel={ option => `${option.label} [${option.type.toUpperCase()}-${option.value}]` }
                    getOptionValue={ option => `${option.type.toUpperCase()}-${option.value}` }
                    isMulti={true} />
                </div>
              </fieldset>
              <fieldset>
                <legend><Translate id="vulnerability.form.severity.legend">Severity</Translate></legend>
                <Select
                  id="severity"
                  name="severity"
                  className="rselect"
                  classNamePrefix="rselect"
                  value={severityValue}
                  onChange={(selectedOption) => setSeverity(selectedOption as SelectOption)}
                  options={severities}
                  defaultValue={severities[0]}
                  getOptionLabel={ option => `${option.label}` }
                  placeholder={translate({
                    id: 'vulnerability.form.severity.placeholder',
                    message: 'Select severity',
                  })}
                />
              </fieldset>
              <fieldset>
                <legend><Translate id="vulnerability.form.encryptionkey.legend">Encryption key</Translate></legend>
                <div><a href={keyLink} download={ 'Core Blockchain Security (' + keyId + ').asc' } target="_blank"><Translate id="vulnerability.form.key.download">Key</Translate> ðŸ”‘ {keyId}</a></div>
                <p><Translate id="vulnerability.form.key.note">Use always this key to exchange the communication. If message is not encrypted, it will be rejected.</Translate></p>
              </fieldset>
              <div>
                <button className="report button button--primary" type="submit">
                  {translate({
                    id: 'vulnerability.form.button.submit',
                    message: 'Open Email Client to Compose Report',
                  })}
                </button>
                <button className="report button button--primary button--outline" type="reset">
                  {translate({
                    id: 'vulnerability.form.button.reset',
                    message: 'Reset Form',
                  })}
                </button>
              </div>
            </form>
          </div>
        </main>
      </div>
    </Layout>
  );
};

export default ReportBug;
